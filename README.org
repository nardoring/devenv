#+title: Nardo Env

Install [[https://github.com/microsoft/terminal][Windows Terminal]] if you're not already using it(surprising this is not horrible actually)

** WSL2

Follow these steps, install Ubuntu, we are only going to use it make sure we have =systemd= running, then you can delete it later

- [[https://learn.microsoft.com/en-us/windows/wsl/install-manual#step-1---enable-the-windows-subsystem-for-linux][Enable WSL2]]

Reboot now.

- [[https://learn.microsoft.com/en-us/windows/wsl/systemd][Enable systemd]]

Reboot again even if it says you do not have to.

#+begin_src shell
systemctl list-unit-files --type=service | grep systemd
#+end_src

[[file:./systemd.png]]

This is essential, do not install NixOS until you can successfully enable systemd


** NixOS on WSL
https://github.com/nix-community/NixOS-WSL

Download the NixOS tarball [[https://github.com/nix-community/NixOS-WSL/releases/download/2311.5.3/nixos-wsl.tar.gz][here]] to =C:/users/<your-user>= and open a command prompt there

#+begin_src shell
wsl --import NixOS .\NixOS\ nixos-wsl.tar.gz --version 2
#+end_src

#+begin_src shell
wsl -d NixOS
#+end_src

Set your root password as your normally would, it defaults to 'nixos'.

We should now be in the nixos container, now we can start a shell with =vim= and =git=
#+begin_src shell
nix-shell -p neovim git
#+end_src

**Notice that the shell prompt changes** to let you know that you are in a nix shell. We can exit this when we are done editing with =exit= to return to our normal shell prompt.

Backup =/etc/nixos= first
#+begin_src shell
sudo cp /etc/nixos /etc/nixos~
#+end_src

Clone this repo to =~/= or where ever you'd like to manage your config from. We can just symlink to =/etc/nixos/=.

#+begin_src shell
cd ~
git clone git@github.com:nardoring/devenv.git
sudo ln -s ./devenv/* /etc/nixos
#+end_src


*** Configuration

Set your =defaultUser= and =networking.hostName=
#+begin_src shell
nvim /devenv/users/<you>/configuration.nix
#+end_src

#+begin_src nix
# /etc/nixos/users/<you>/configuration.nix
{
  lib, pkgs, config, modulesPath, ...
}: {
  imports = [
    "${modulesPath}/profiles/minimal.nix"
  ];

  wsl = {
    defaultUser = "<you>"; # TODO Set name
  };

  users.users.<you> = {
    group = "users";
    isNormalUser = true;
    extraGroups = ["docker"];
  };

  # set this to your Windows 11/10 “Device name.” You can find
  # this in the Windows Settings app under System > About.
  networking.hostName = "hostname"; # TODO Set hostname
  ...
}
#+end_src

Set your =username= and git info
#+begin_src shell
nvim /devenv/users/<you>/home.nix
#+end_src

#+begin_src nix
# /etc/nixos/users/<>/default.nix
{
  config, pkgs, ...
}: {
  home = {
    username = "jdoe"; # TODO Set name
  };
  ...
  programs = {
    git = {
      enable = true;
      userName = "Jane Doe";
      userEmail = "jane.doe@example.org";
    };
  };
}
#+end_src

Set your =home-manager.users<defaultUser>=
#+begin_src shell
nvim /devenv/flake.nix
#+end_src

#+begin_src nix
# /etc/nixos/flake.nix
{
  inputs = {
    ...
  };

  outputs = inputs @ {
    ...
  }: let
    system = "x86_64-linux";

    makeUserHost = userName:
      nixpkgs.lib.nixosSystem {
        inherit system;
        modules = [
          ./users/common.nix
          ./users/${userName}/configuration.nix
          home-manager.nixosModules.home-manager
          {
            ...
            home-manager.users.${userName} = import ./users/${userName};
          }
        ];
      };
  in {
    nixosConfigurations = {
      <your-hostname> = makeUserHost "<you>";
      <other-hostname> = makeUserHost "<not-you>";
      ...
    };
  };
}
#+end_src

Once we are done editing these files we can go ahead and =exit= the devshell. Notice the prompt changes back to your original shell prompt.


*** Build

Let's check that this will build, if there's any errors it will tell us
#+begin_src shell
$ nix flake check
warning: Git tree '/etc/nixos' is dirty
#+end_src

We can ignore this warning, it's just telling us that we have uncommited changes

We now see that your hostname is shown in the flake output as a =nixosConfiguration=

#+begin_src shell
$ nix flake show
git+file:///etc/nixos
└───nixosConfigurations
    ├───your-hostname: NixOS configuration
    ├───other-hostname: NixOS configuration
    └───otherhost-name: NixOS configuration

#+end_src

Once this works then we can track our lockfile and commit our changes
#+begin_src shell
git add flake.lock
git commit -m "init wsl config"
#+end_src

Then rebuild our newly configured system. This will be the command we run any time we make changes to =*.nix= files and want to rebuild out system.

#+begin_src shell
sudo nixos-rebuild switch
#+end_src

We should see a new file =flake.lock=, this is what locks all our dependency versions.

Exit out of NixOS, then from command prompt run:

#+begin_src shell
wsl --shutdown
wsl -d NixOS
#+end_src

It should automatically log in as the =<username>@<pick a host name>= from =configuration.nix= (your new default user) not =nixos@nixos= or =root@nixos=, if that's the case, something went wrong.

Reboot.


*** Updating
To update any of our flake inputs, which updates any packages we have installed as well as our OS, we can run

#+begin_src shell
cd ~/devenv
nix flake update
sudo nixos-rebuild switch
#+end_src

This puts us in our config directory, updates =flake.lock= and rebuilds the system. Be sure to commit the newly updated =flake.lock= as this is what ensures we are all using the same versions of any installed packages, dev dependencies, etc.
